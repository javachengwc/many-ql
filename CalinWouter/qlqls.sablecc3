// Used the skeleton of: http://improve.dk/writing-a-calculator-in-csharp-using-sablecc/
Package org.uva.student.calinwouter.qlqls.generated;

Helpers
    digit	        = ['0' .. '9'];
    letter	        = [['a' .. 'z'] + ['A' .. 'Z']];
    any	            = [0 .. 0xFFFF];
    carriage_return	= 13;
    line_feed	    = 10;
    end_of_line     = carriage_return | line_feed | carriage_return line_feed;
    no_enter        = [any - [carriage_return + line_feed]];
    hex_char        = [['0' .. '9'] + [['a' .. 'z'] + ['A' .. 'Z']]];
    tab             = 9;

// For conflicting tokens/productions, I add the prefix "token_".
Tokens
    comment         = '//' [any - [carriage_return + line_feed]] end_of_line?;
    token_not	    = '!';
    number	        = (digit+ | digit+ '.' digit+);
    or	            = '||';
    and	            = '&&';
    add	            = '+';
    subtract	    = '-';
    multiply	    = '*';
    divide	        = '/';
    modulo	        = '%';
    left_parenthesis = '(';
    right_parenthesis = ')';
    token_form	    = 'form';
    left_brace	    = '{';
    right_brace	    = '}';
    colon	        = ':';
    if	            = 'if';
    else	        = 'else';
    token_boolean	= 'boolean';
    token_true	    = 'true';
    token_false	    = 'false';
    token_string	= 'string';
    token_integer	= 'int';
    string	        = '"' [no_enter - '"' ]* '"';
    token_equals	= '==';
    token_not_equals = '!=';
    token_lesser_than = '<';
    token_greater_than = '>';
    token_lesser_than_or_equals = '<=';
    token_greater_than_or_equals = '>=';
    blank	        = (' ' | end_of_line | tab)+;
    identifier	    = (letter (digit | letter)*);
    hex             = '#' hex_char+;
    comma           = ',';

Ignored Tokens
    comment, blank;

Productions

    // QL
    begin {-> begin}
        = {form} form
          {-> New begin.form(form.form) }
        | {stylesheet}  stylesheet
          {-> New begin.stylesheet(stylesheet.function) }
        ;

    form {-> form}
        = token_form identifier left_brace [sl]:statement_list right_brace
          {-> New form(identifier, [sl.statement])}
        ;

    statement_list {-> statement*}
        = statement statement_list_tail*
          {-> [statement, statement_list_tail.statement]}
        ;

    statement_list_tail {-> statement}
        = statement
          {-> statement}
        ;


    type {-> type}
        = {boolean}	token_boolean
          {-> New type.boolean()}
        | {string}	token_string
          {-> New type.string()}
        | {integer}	token_integer
          {-> New type.integer()}
        ;

    statement {-> statement}
        = {question} identifier colon string type
          {-> New statement.question(identifier, string, type.type)}
        | {value} identifier colon string type left_parenthesis expression right_parenthesis
          {-> New statement.value(identifier, string, type.type, expression.expression)}
        | {if_else}
          if left_parenthesis expression right_parenthesis left_brace
          [then_statement_list]:statement_list
          right_brace else [left_brace2]:left_brace
          [else_statement_list]:statement_list
          [right_brace2]:right_brace
          {-> New statement.if_else(expression, [then_statement_list.statement], [else_statement_list.statement])}
        | {if}
          if left_parenthesis expression right_parenthesis left_brace
          [then_statement_list]:statement_list
          right_brace
          {-> New statement.if(expression, [then_statement_list.statement])}
        ;

    expression {-> expression}
        = {logical}	logical
          {-> logical.expression}
        ;

    logical {-> expression}
        = {or} [left]:logical or [right]:comparison
          {-> New expression.or(left.expression, right.expression)}
        | {and} [left]:logical and [right]:comparison
          {-> New expression.and(left.expression, right.expression)}
        | {comparison} comparison
          {-> comparison.expression}
        ;

    comparison {-> expression}
        = {equals} [left]:factor token_equals [right]:addend
          {-> New expression.equals(left.expression, right.expression)}
        | {not_equals} [left]:factor token_not_equals [right]:addend
          {-> New expression.not_equals(left.expression, right.expression)}
        | {lesser_than} [left]:factor token_lesser_than [right]:addend
          {-> New expression.lesser_than(left.expression, right.expression)}
        | {greater_than} [left]:factor token_greater_than [right]:addend
          {-> New expression.greater_than(left.expression, right.expression)}
        | {lesser_than_or_equals} [left]:factor token_lesser_than_or_equals [right]:addend
          {-> New expression.lesser_than_or_equals(left.expression, right.expression)}
        | {greater_than_or_equals} [left]:factor token_greater_than_or_equals [right]:addend
          {-> New expression.greater_than_or_equals(left.expression, right.expression)}
        | {addend} addend
          {-> addend.expression}
        ;

    addend {-> expression}
        = {add} [left]:addend add [right]:factor
          {-> New expression.add(left.expression, right.expression)}
        | {subtract} [left]:addend subtract [right]:factor
          {-> New expression.subtract(left.expression, right.expression)}
        | {factor} factor
          {-> factor.expression}
        ;

    factor {-> expression}
        = {multiply} [left]:factor multiply [right]:unary
          {-> New expression.multiply(left.expression, right.expression)}
        | {divide} [left]:factor divide [right]:unary
          {-> New expression.divide(left.expression, right.expression)}
        | {modulo} [left]:factor modulo [right]:unary
          {-> New expression.modulo(left.expression, right.expression)}
        | {unary} unary
          {-> unary.expression}
        ;

    unary {-> expression}
        = {not} token_not unary
          {-> New expression.not(unary.expression)}
        | {number} number
          {-> New expression.number(number)}
        | {true} token_true
          {-> New expression.true()}
        | {false} token_false
          {-> New expression.false()}
        | {paren} left_parenthesis expression right_parenthesis
          {-> expression.expression}
        | {identifier} identifier
          {-> New expression.identifier(identifier)}
        ;

    // QLS
    stylesheet {-> function}
        = function {-> function}
        ;

    function {-> function}
        = {non_parameterized} identifier left_parenthesis right_parenthesis
          {-> New function.non_parameterized(identifier)}
        | {parameterized} identifier left_parenthesis element list_tail* right_parenthesis
          {-> New function.parameterized(identifier, [element, list_tail.element])}
        ;

    list_tail {-> element}
        = comma element
          {-> element};

    element {-> element}
        = {type} type
          {-> New element.type(type)}
        | {identifier}   identifier
          {-> New element.identifier(identifier)}
        | {hex} hex
          {-> New element.hex(hex)}
        | {string} string
          {-> New element.string(string)}
        | {number} number
          {-> New element.number(number)}
        | {object} object
          {-> New element.object([object.key_value])}
        | {function} function
          {-> New element.function(function)}
        ;

    key_value {-> key_value}
        = [key]:element colon [value]:element
          {-> New key_value(key, value)}
        ;

    object {-> key_value* }
        = {non_parameterized} left_brace right_brace
          {-> []}
        | {parameterized} left_brace key_value object_tail* right_brace
          {-> [key_value.key_value, object_tail.key_value]}
        ;

    object_tail {-> key_value}
        = comma key_value
          {-> key_value}
        ;

Abstract Syntax Tree
    begin
        = {form}                    form
        | {stylesheet}              function
        ;
    form
        =			                [identifier]:identifier statement*
        ;
    statement
        = {question}	            identifier [string]:string [type]:type
        | {value}		            identifier [string]:string [type]:type [expression]:expression
        | {if_else}		            [expression]:expression [then_statement_list]:statement* [else_statement_list]:statement*
        | {if}			            [expression]:expression [then_statement_list]:statement*
        ;
    type
        = {boolean}
        | {string}
        | {integer}
        ;
    expression
        = {add}			            [left]:expression [right]:expression
        | {subtract}	            [left]:expression [right]:expression
        | {true}
        | {false}
        | {or}			            [left]:expression [right]:expression
        | {and}			            [left]:expression [right]:expression
        | {equals}		            [left]:expression [right]:expression
        | {not_equals}	            [left]:expression [right]:expression
        | {lesser_than}			    [left]:expression [right]:expression
        | {greater_than}			[left]:expression [right]:expression
        | {lesser_than_or_equals}	[left]:expression [right]:expression
        | {greater_than_or_equals}  [left]:expression [right]:expression
        | {multiply}			    [left]:expression [right]:expression
        | {divide}			        [left]:expression [right]:expression
        | {modulo}			        [left]:expression [right]:expression
        | {not}			            expression
        | {number}		            number
        | {identifier}	            identifier
        ;
    function
        = {non_parameterized}       identifier
        | {parameterized}           identifier element*
        ;
    element
        = {type}                    type
        | {identifier}              identifier
        | {hex}                     hex
        | {string}                  string
        | {number}                  number
        | {object}                  key_value*
        | {function}                function
        ;
    key_value
        = [key]:element             [value]:element
        ;