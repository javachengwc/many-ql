/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.uva.student.calinwouter.qlqls.generated.analysis;

import org.uva.student.calinwouter.qlqls.generated.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAFormBegin(AFormBegin node);
    void caseAStylesheetBegin(AStylesheetBegin node);
    void caseAForm(AForm node);
    void caseAQuestionStatement(AQuestionStatement node);
    void caseAValueStatement(AValueStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseABooleanType(ABooleanType node);
    void caseAStringType(AStringType node);
    void caseAIntegerType(AIntegerType node);
    void caseAAddExpression(AAddExpression node);
    void caseASubtractExpression(ASubtractExpression node);
    void caseATrueExpression(ATrueExpression node);
    void caseAFalseExpression(AFalseExpression node);
    void caseAOrExpression(AOrExpression node);
    void caseAAndExpression(AAndExpression node);
    void caseAEqualsExpression(AEqualsExpression node);
    void caseANotEqualsExpression(ANotEqualsExpression node);
    void caseALesserThanExpression(ALesserThanExpression node);
    void caseAGreaterThanExpression(AGreaterThanExpression node);
    void caseALesserThanOrEqualsExpression(ALesserThanOrEqualsExpression node);
    void caseAGreaterThanOrEqualsExpression(AGreaterThanOrEqualsExpression node);
    void caseAMultiplyExpression(AMultiplyExpression node);
    void caseADivideExpression(ADivideExpression node);
    void caseAModuloExpression(AModuloExpression node);
    void caseANotExpression(ANotExpression node);
    void caseANumberExpression(ANumberExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseANonParameterizedFunction(ANonParameterizedFunction node);
    void caseAParameterizedFunction(AParameterizedFunction node);
    void caseATypeElement(ATypeElement node);
    void caseAIdentifierElement(AIdentifierElement node);
    void caseAHexElement(AHexElement node);
    void caseAStringElement(AStringElement node);
    void caseANumberElement(ANumberElement node);
    void caseAObjectElement(AObjectElement node);
    void caseAFunctionElement(AFunctionElement node);
    void caseAKeyValue(AKeyValue node);

    void caseTComment(TComment node);
    void caseTTokenNot(TTokenNot node);
    void caseTNumber(TNumber node);
    void caseTOr(TOr node);
    void caseTAnd(TAnd node);
    void caseTAdd(TAdd node);
    void caseTSubtract(TSubtract node);
    void caseTMultiply(TMultiply node);
    void caseTDivide(TDivide node);
    void caseTModulo(TModulo node);
    void caseTLeftParenthesis(TLeftParenthesis node);
    void caseTRightParenthesis(TRightParenthesis node);
    void caseTTokenForm(TTokenForm node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTColon(TColon node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTTokenBoolean(TTokenBoolean node);
    void caseTTokenTrue(TTokenTrue node);
    void caseTTokenFalse(TTokenFalse node);
    void caseTTokenString(TTokenString node);
    void caseTTokenInteger(TTokenInteger node);
    void caseTString(TString node);
    void caseTTokenEquals(TTokenEquals node);
    void caseTTokenNotEquals(TTokenNotEquals node);
    void caseTTokenLesserThan(TTokenLesserThan node);
    void caseTTokenGreaterThan(TTokenGreaterThan node);
    void caseTTokenLesserThanOrEquals(TTokenLesserThanOrEquals node);
    void caseTTokenGreaterThanOrEquals(TTokenGreaterThanOrEquals node);
    void caseTBlank(TBlank node);
    void caseTIdentifier(TIdentifier node);
    void caseTHex(THex node);
    void caseTComma(TComma node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
