/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.uva.student.calinwouter.qlqls.generated.analysis;

import java.util.*;
import org.uva.student.calinwouter.qlqls.generated.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormBegin(AFormBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStylesheetBegin(AStylesheetBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForm(AForm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQuestionStatement(AQuestionStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueStatement(AValueStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerType(AIntegerType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubtractExpression(ASubtractExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExpression(ATrueExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExpression(AFalseExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualsExpression(AEqualsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualsExpression(ANotEqualsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALesserThanExpression(ALesserThanExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterThanExpression(AGreaterThanExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALesserThanOrEqualsExpression(ALesserThanOrEqualsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterThanOrEqualsExpression(AGreaterThanOrEqualsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyExpression(AMultiplyExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideExpression(ADivideExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModuloExpression(AModuloExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExpression(ANotExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberExpression(ANumberExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonParameterizedFunction(ANonParameterizedFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterizedFunction(AParameterizedFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeElement(ATypeElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierElement(AIdentifierElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHexElement(AHexElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringElement(AStringElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberElement(ANumberElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAObjectElement(AObjectElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionElement(AFunctionElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAKeyValue(AKeyValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenNot(TTokenNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAdd(TAdd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubtract(TSubtract node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiply(TMultiply node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftParenthesis(TLeftParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightParenthesis(TRightParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenForm(TTokenForm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBrace(TLeftBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBrace(TRightBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenBoolean(TTokenBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenTrue(TTokenTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenFalse(TTokenFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenString(TTokenString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenInteger(TTokenInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenEquals(TTokenEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenNotEquals(TTokenNotEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenLesserThan(TTokenLesserThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenGreaterThan(TTokenGreaterThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenLesserThanOrEquals(TTokenLesserThanOrEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTokenGreaterThanOrEquals(TTokenGreaterThanOrEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHex(THex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
