/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.uva.student.calinwouter.qlqls.generated.analysis;

import java.util.*;
import org.uva.student.calinwouter.qlqls.generated.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPBegin().apply(this);
        outStart(node);
    }

    public void inAFormBegin(AFormBegin node)
    {
        defaultIn(node);
    }

    public void outAFormBegin(AFormBegin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormBegin(AFormBegin node)
    {
        inAFormBegin(node);
        if(node.getForm() != null)
        {
            node.getForm().apply(this);
        }
        outAFormBegin(node);
    }

    public void inAStylesheetBegin(AStylesheetBegin node)
    {
        defaultIn(node);
    }

    public void outAStylesheetBegin(AStylesheetBegin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStylesheetBegin(AStylesheetBegin node)
    {
        inAStylesheetBegin(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAStylesheetBegin(node);
    }

    public void inAForm(AForm node)
    {
        defaultIn(node);
    }

    public void outAForm(AForm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForm(AForm node)
    {
        inAForm(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAForm(node);
    }

    public void inAQuestionStatement(AQuestionStatement node)
    {
        defaultIn(node);
    }

    public void outAQuestionStatement(AQuestionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionStatement(AQuestionStatement node)
    {
        inAQuestionStatement(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAQuestionStatement(node);
    }

    public void inAValueStatement(AValueStatement node)
    {
        defaultIn(node);
    }

    public void outAValueStatement(AValueStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueStatement(AValueStatement node)
    {
        inAValueStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAValueStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getElseStatementList());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getThenStatementList());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getThenStatementList());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIfStatement(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        outABooleanType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        outAStringType(node);
    }

    public void inAIntegerType(AIntegerType node)
    {
        defaultIn(node);
    }

    public void outAIntegerType(AIntegerType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerType(AIntegerType node)
    {
        inAIntegerType(node);
        outAIntegerType(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAddExpression(node);
    }

    public void inASubtractExpression(ASubtractExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractExpression(ASubtractExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractExpression(ASubtractExpression node)
    {
        inASubtractExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubtractExpression(node);
    }

    public void inATrueExpression(ATrueExpression node)
    {
        defaultIn(node);
    }

    public void outATrueExpression(ATrueExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpression(ATrueExpression node)
    {
        inATrueExpression(node);
        outATrueExpression(node);
    }

    public void inAFalseExpression(AFalseExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseExpression(AFalseExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpression(AFalseExpression node)
    {
        inAFalseExpression(node);
        outAFalseExpression(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAEqualsExpression(AEqualsExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualsExpression(AEqualsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsExpression(AEqualsExpression node)
    {
        inAEqualsExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualsExpression(node);
    }

    public void inANotEqualsExpression(ANotEqualsExpression node)
    {
        defaultIn(node);
    }

    public void outANotEqualsExpression(ANotEqualsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsExpression(ANotEqualsExpression node)
    {
        inANotEqualsExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANotEqualsExpression(node);
    }

    public void inALesserThanExpression(ALesserThanExpression node)
    {
        defaultIn(node);
    }

    public void outALesserThanExpression(ALesserThanExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALesserThanExpression(ALesserThanExpression node)
    {
        inALesserThanExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALesserThanExpression(node);
    }

    public void inAGreaterThanExpression(AGreaterThanExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanExpression(AGreaterThanExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanExpression(AGreaterThanExpression node)
    {
        inAGreaterThanExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterThanExpression(node);
    }

    public void inALesserThanOrEqualsExpression(ALesserThanOrEqualsExpression node)
    {
        defaultIn(node);
    }

    public void outALesserThanOrEqualsExpression(ALesserThanOrEqualsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALesserThanOrEqualsExpression(ALesserThanOrEqualsExpression node)
    {
        inALesserThanOrEqualsExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALesserThanOrEqualsExpression(node);
    }

    public void inAGreaterThanOrEqualsExpression(AGreaterThanOrEqualsExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanOrEqualsExpression(AGreaterThanOrEqualsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanOrEqualsExpression(AGreaterThanOrEqualsExpression node)
    {
        inAGreaterThanOrEqualsExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterThanOrEqualsExpression(node);
    }

    public void inAMultiplyExpression(AMultiplyExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplyExpression(AMultiplyExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyExpression(AMultiplyExpression node)
    {
        inAMultiplyExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultiplyExpression(node);
    }

    public void inADivideExpression(ADivideExpression node)
    {
        defaultIn(node);
    }

    public void outADivideExpression(ADivideExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExpression(ADivideExpression node)
    {
        inADivideExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivideExpression(node);
    }

    public void inAModuloExpression(AModuloExpression node)
    {
        defaultIn(node);
    }

    public void outAModuloExpression(AModuloExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloExpression(AModuloExpression node)
    {
        inAModuloExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModuloExpression(node);
    }

    public void inANotExpression(ANotExpression node)
    {
        defaultIn(node);
    }

    public void outANotExpression(ANotExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpression(ANotExpression node)
    {
        inANotExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANotExpression(node);
    }

    public void inANumberExpression(ANumberExpression node)
    {
        defaultIn(node);
    }

    public void outANumberExpression(ANumberExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpression(ANumberExpression node)
    {
        inANumberExpression(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inANonParameterizedFunction(ANonParameterizedFunction node)
    {
        defaultIn(node);
    }

    public void outANonParameterizedFunction(ANonParameterizedFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonParameterizedFunction(ANonParameterizedFunction node)
    {
        inANonParameterizedFunction(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outANonParameterizedFunction(node);
    }

    public void inAParameterizedFunction(AParameterizedFunction node)
    {
        defaultIn(node);
    }

    public void outAParameterizedFunction(AParameterizedFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterizedFunction(AParameterizedFunction node)
    {
        inAParameterizedFunction(node);
        {
            List<PElement> copy = new ArrayList<PElement>(node.getElement());
            Collections.reverse(copy);
            for(PElement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParameterizedFunction(node);
    }

    public void inATypeElement(ATypeElement node)
    {
        defaultIn(node);
    }

    public void outATypeElement(ATypeElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeElement(ATypeElement node)
    {
        inATypeElement(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeElement(node);
    }

    public void inAIdentifierElement(AIdentifierElement node)
    {
        defaultIn(node);
    }

    public void outAIdentifierElement(AIdentifierElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierElement(AIdentifierElement node)
    {
        inAIdentifierElement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierElement(node);
    }

    public void inAHexElement(AHexElement node)
    {
        defaultIn(node);
    }

    public void outAHexElement(AHexElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexElement(AHexElement node)
    {
        inAHexElement(node);
        if(node.getHex() != null)
        {
            node.getHex().apply(this);
        }
        outAHexElement(node);
    }

    public void inAStringElement(AStringElement node)
    {
        defaultIn(node);
    }

    public void outAStringElement(AStringElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringElement(AStringElement node)
    {
        inAStringElement(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringElement(node);
    }

    public void inANumberElement(ANumberElement node)
    {
        defaultIn(node);
    }

    public void outANumberElement(ANumberElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberElement(ANumberElement node)
    {
        inANumberElement(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberElement(node);
    }

    public void inAObjectElement(AObjectElement node)
    {
        defaultIn(node);
    }

    public void outAObjectElement(AObjectElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectElement(AObjectElement node)
    {
        inAObjectElement(node);
        {
            List<PKeyValue> copy = new ArrayList<PKeyValue>(node.getKeyValue());
            Collections.reverse(copy);
            for(PKeyValue e : copy)
            {
                e.apply(this);
            }
        }
        outAObjectElement(node);
    }

    public void inAFunctionElement(AFunctionElement node)
    {
        defaultIn(node);
    }

    public void outAFunctionElement(AFunctionElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionElement(AFunctionElement node)
    {
        inAFunctionElement(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionElement(node);
    }

    public void inAKeyValue(AKeyValue node)
    {
        defaultIn(node);
    }

    public void outAKeyValue(AKeyValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeyValue(AKeyValue node)
    {
        inAKeyValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getKey() != null)
        {
            node.getKey().apply(this);
        }
        outAKeyValue(node);
    }
}
