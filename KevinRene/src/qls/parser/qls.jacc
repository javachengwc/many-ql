%package qls.parser
%class QLSParser
%interface QLSTokens
%semantic ql.ast.QLNode

%token <QLInteger> INTEGER
%token <QLBoolean> BOOLEAN
%token <QLString> STRING
%token <QLFloat> MONEY FLOAT

%token <IntegerLiteral> INTEGERLITERAL 
%token <BooleanLiteral> BOOLEANLITERAL
%token <StringLiteral> STRINGLITERAL
%token <FloatLiteral> FLOATLITERAL
%token <FloatLiteral> MONEYLITERAL

%token WIDTH FONT FONTSIZE HEIGHT COLOR

%token <Identifier> IDENTIFIER
%token <Stylesheet> STYLESHEET 
%token <Page> PAGE 
%token <Section> SECTION 
%token <Widget> WIDGET 
%token <Question> QUESTION 
%token DEFAULT 

%token RADIO DROPDOWN SLIDER SPINBOX TEXT 
%token <Checkbox> CHECKBOX
%token  '"' ':' '.' ',' ';'
%token '(' ')' '{' '}'

%type <Literal> literal
%type <QLType> type
%type <Block> statements pages
%type <Statement> statement
%type <Property> property
%type <StyleProperties> styleProperties
%type <WidgetType> widgetType
%type <Widget> widget
%type <Page> page

%{
import ql.ast.QLNode;
import ql.ast.QLType;
import ql.ast.type.*;
import ql.ast.expression.Identifier;

import qls.ast.*;
import qls.ast.statement.*;
import qls.ast.statement.widget.*;
import qls.ast.statement.widget.type.*;
import qls.ast.statement.widget.type.parameterised.*;
import qls.ast.statement.widget.styling.*;
import qls.ast.statement.widget.styling.property.*;
import qls.ast.expression.Literal;
import qls.ast.expression.literal.*;

@SuppressWarnings("all")
%}

%%		
	stylesheet : STYLESHEET IDENTIFIER '{' pages '}' { result = new Stylesheet($2, $4); }
				;

  	pages 	: page pages  { $$ = new Block($1, $2); }
        	| page        { $$ = new Block($1); }
        	;

	page 	: PAGE IDENTIFIER '{' statements '}'  { $$ = new Page($2, $4); }
			;

	statements	: statement statements	{ $$ = new Block($1, $2); }
        		| /* empty */			{ $$ = new Block(); }
				;
				
	statement	: SECTION STRINGLITERAL '{' statements '}'  { $$ = new Section($2, $4);  }
        		| DEFAULT type widget						{ $$ = new DefaultWidget($2, $3);  }
        		| DEFAULT type '{' styleProperties '}'           { $$ = new DefaultStyle($2, $4);  }
        		| QUESTION IDENTIFIER ';'                      { $$ = new Question($2);     }
        		| QUESTION IDENTIFIER widget				{ $$ = new Question($2, $3); }
	    		;

	type	: INTEGER	{ $$ = new QLInteger(); }
			| MONEY		{ $$ = new QLMoney(); }
		 	| FLOAT		{ $$ = new QLFloat(); }
		 	| BOOLEAN	{ $$ = new QLBoolean(); }
			| STRING 	{ $$ = new QLString(); }
			;
			
	literal	: BOOLEANLITERAL
			| INTEGERLITERAL
			| FLOATLITERAL
			| MONEYLITERAL
			| STRINGLITERAL
			;
	
	widget 	: WIDGET widgetType	';'					{ $$ = new Widget($2); }
			| '{' styleProperties WIDGET widgetType ';' '}' 	{ $$ = new Widget($2, $4); }
			;
			
	widgetType	: SPINBOX           	  				{ $$ = new Spinbox(); }
				| RADIO '(' literal ',' literal ')'    	{ $$ = new RadioButton($3, $5); }
				| SLIDER '(' literal ',' literal ')'   	{ $$ = new Slider($3, $5); }
				| DROPDOWN '(' literal ',' literal ')' 	{ $$ = new Dropdown($3, $5); }
				| TEXT                    				{ $$ = new TextField(); }
				| CHECKBOX               				{ $$ = new Checkbox(); }
				;
	
	styleProperties	: property styleProperties	{ $$ = new StyleProperties($1, $2); }
					| /* empty */			{ $$ = new StyleProperties(); }
					;
				
  property	: WIDTH		':' literal ';' { $$ = new Width($3); }
			| HEIGHT	':' literal ';' { $$ = new Height($3); }
			| FONT		':' literal ';' { $$ = new Font($3); }
			| FONTSIZE	':' literal ';' { $$ = new FontSize($3); }
			| COLOR		':' literal ';' { $$ = new Color($3); }
			;

%%
private QLSLexer lexer; 

private QLNode result;

public QLNode getResult() {
  return result;
}

public QLSParser(QLSLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(yyerrno<0 ? msg : yyerrmsgs[yyerrno]);
}